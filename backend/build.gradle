import java.text.SimpleDateFormat

buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.catale'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone'}
}

dependencies {
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // SpringMVC
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    // Test
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // RestAssured
    testImplementation 'io.rest-assured:rest-assured'
    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }
    // Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // Configuration-Processor
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'//s3 관련 의존성 추가

    // health check
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // fastapi request
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    //oauth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //spring-boot
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.3')

    //Spring WebFlux - 반응형 웹 애플리케이션 개발 시 사용
    implementation 'org.springframework.boot:spring-boot-starter-webflux'


}

def generated = 'src/main/generated'

def getCurrentDateTime() {
    return new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}

bootJar {
    archiveBaseName = 'catale-app'
    archiveVersion = ''
    archiveExtension = 'jar'
}

tasks.named('bootJar') {
    doFirst {
        def existingJar = file("${buildDir}/libs/catale-app.jar")
        if (existingJar.exists()) {
            def newFileName = "catele-app-${getCurrentDateTime()}.jar"
            existingJar.renameTo(file("${buildDir}/libs/${newFileName}"))
        }
    }
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
}
